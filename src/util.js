var turf, turfFlip;

turf = require('@turf/helpers');

turfFlip = require('@turf/flip');

L.Polygon.include({
  toTurfFeature: function() {
    var coords, multi, ring0;
    if (this.isEmpty() || !this._latlngs) {
      return;
    }
    multi = !L.LineUtil.isFlat(this._latlngs[0]);
    ring0 = multi ? this._latlngs[0][0] : this._latlngs[0];
    coords = L.GeoJSON.latLngsToCoords(ring0, 0, true, 17);
    return turf.polygon([coords]);
  },
  outerRingAsTurfLineString: function() {
    var coords, multi, ring0;
    multi = !L.LineUtil.isFlat(this._latlngs[0]);
    ring0 = multi ? this._latlngs[0][0] : this._latlngs[0];
    coords = L.GeoJSON.latLngsToCoords(ring0, 0, true, 17);
    return turf.lineString(coords);
  }
});

L.LatLng.prototype.toTurfFeature = function() {
  var coords;
  coords = L.GeoJSON.latLngToCoords(this);
  return turf.point(coords);
};

L.Polyline.include({
  toTurfFeature: function() {
    var coords;
    if (this.isEmpty() || !this._latlngs) {
      return;
    }
    coords = L.GeoJSON.latLngsToCoords(this._latlngs, 0, 0, 17);
    return turf.lineString(coords);
  },
  fromTurfFeature: function(feature) {
    return this.setLatLngs(turfFlip(feature).geometry.coordinates);
  }
});

L.LayerGroup.include({
  getLayerUUID: function(layer) {
    return layer.feature.properties.uuid;
  },
  hasUUIDLayer: function(layer) {
    var id, l, layerUUID, ref;
    if (!!layer && (layerUUID = this.getLayerUUID(layer))) {
      ref = this._layers;
      for (id in ref) {
        l = ref[id];
        if (this.getLayerUUID(l) === layerUUID) {
          return true;
        }
      }
    }
    return false;
  }
});

// ---
// generated by coffee-script 1.9.2
