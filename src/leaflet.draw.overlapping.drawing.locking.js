var L, _, turf, turfinside;

L = require('leaflet');

_ = require('lodash');

turf = require('@turf/helpers');

turfinside = require('@turf/inside');

L.Draw.Feature.DrawMixin = {
  _draw_initialize: function() {
    this.on('enabled', this._draw_on_enabled, this);
    return this.on('disabled', this._draw_on_disabled, this);
  },
  _draw_on_enabled: function() {
    if (!this.options.guideLayers) {
      return;
    }
    if (!this._mouseMarker) {
      this._map.on('layeradd', this._draw_on_enabled, this);
    } else {
      this._map.off('layeradd', this._draw_on_enabled, this);
      return this._map.on(L.Draw.Event.DRAWVERTEX, this._draw_on_click, this);
    }
  },
  _draw_on_click: function(e) {
    var guideLayer, i, layer, len, marker, markerPoint, polygon, ref, results;
    marker = e.layers.getLayers().slice(0).pop();
    markerPoint = marker.getLatLng().toTurfFeature();
    ref = this.options.guideLayers;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      guideLayer = ref[i];
      if (typeof guideLayer.getLayers !== 'function') {
        continue;
      }
      results.push((function() {
        var j, len1, ref1, results1;
        ref1 = guideLayer.getLayers();
        results1 = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          layer = ref1[j];
          polygon = layer.toTurfFeature();
          if (turfinside["default"](markerPoint, polygon, {
            ignoreBoundary: false
          })) {
            results1.push(this.deleteLastVertex());
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  },
  _draw_on_disabled: function() {
    if (this._mouseMarker) {
      this._mouseMarker.off('mouseup', this._draw_on_click, this);
    }
    return this._map.off('layeradd', this._draw_on_enabled, this);
  }
};

L.Draw.Feature.include(L.Draw.Feature.DrawMixin);

L.Draw.Feature.addInitHook('_draw_initialize');

// ---
// generated by coffee-script 1.9.2
